// Generated by CoffeeScript 1.6.3
(function() {
  var API_VERSION, DEFAULT_FORMAT, Gateway, HOST, PROTOCOL, hyperquest, utils;

  hyperquest = require('hyperquest');

  utils = require('./utils');

  PROTOCOL = "https";

  HOST = "services.postcodeanywhere.co.uk";

  API_VERSION = "v2.00";

  DEFAULT_FORMAT = "json3.ws";

  Gateway = (function() {
    function Gateway(key, options) {
      if (options == null) {
        options = {};
      }
      if (typeof key !== 'string') {
        throw new Error('Invalid postcode anywhere key');
      }
      this.key = key;
      this.request = options.requestModule || hyperquest;
      this.protocol = options.protocol || PROTOCOL;
      this.host = options.host || HOST;
      this.apiVersion = options.apiVersion || API_VERSION;
    }

    Gateway.prototype._buildUrl = function(servicePath, query) {
      return utils.buildUrl(this.protocol, this.host, servicePath, this.apiVersion, DEFAULT_FORMAT, this.key, query);
    };

    Gateway.prototype.bankAccountValidationInteractiveValidate = function(accountNumber, sortCode, callback) {
      var req, url;
      if (!(callback instanceof Function)) {
        throw new TypeError;
      }
      if (!((sortCode != null) && /^[\d{2}-\d{2}-\d{2}]|[\d{8}]$/.test(sortCode))) {
        return callback(new TypeError('Invalid sort code'));
      }
      if (!((accountNumber != null) && /^\d{8}$/.test(accountNumber))) {
        return callback(new TypeError('Invalid account number'));
      }
      url = this._buildUrl('BankAccountValidation/Interactive/Validate', {
        "AccountNumber": accountNumber,
        "SortCode": sortCode
      });
      req = this.request.get(url);
      req.on('error', callback);
      return req.on('response', function(res) {
        var data;
        res.on('error', callback);
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var error;
          try {
            return callback(null, JSON.parse(data));
          } catch (_error) {
            error = _error;
            return callback(error);
          }
        });
      });
    };

    return Gateway;

  })();

  module.exports = Gateway;

}).call(this);
